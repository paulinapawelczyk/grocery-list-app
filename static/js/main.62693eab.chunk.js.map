{"version":3,"sources":["Components/List.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["List","items","removeItem","editItem","className","map","item","id","title","type","onClick","Alert","message","hideAlert","list","useEffect","timeoutId","setTimeout","clearTimeout","getLocalStorage","localStorage","getItem","JSON","parse","App","useState","grocery","setGrocery","setList","isEditing","setIsEditing","editID","setEditID","show","alert","setAlert","showAlert","setItem","stringify","onSubmit","e","preventDefault","newGroceryItem","Date","getTime","toString","placeholder","value","onChange","target","length","filter","editedId","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62693eab.chunk.js","sourcesContent":["import { FaEdit, FaTrash } from 'react-icons/fa';\r\n\r\nconst List = ({ items, removeItem, editItem }) => {\r\n  return (\r\n    <div className=\"grocery-list\">\r\n      {items.map((item) => {\r\n        const { id, title } = item;\r\n        return (\r\n          <div key={id} className=\"grocery-list-item\">\r\n            <p className=\"grocery-list-item-title\">{title}</p>\r\n            <div className=\"btn-list\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"edit-btn\"\r\n                onClick={() => editItem(id)}\r\n              >\r\n                <FaEdit />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"remove-btn\"\r\n                onClick={() => removeItem(id)}\r\n              >\r\n                <FaTrash />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useEffect } from 'react';\r\n\r\nconst Alert = ({ type, message, hideAlert, list }) => {\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      hideAlert();\r\n    }, 2000);\r\n    return () => clearTimeout(timeoutId);\r\n  });\r\n\r\n  return <p className={`alert alert-${type}`}>{message}</p>;\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useEffect, useState } from 'react';\nimport List from './Components/List';\nimport Alert from './Components/Alert';\nimport './App.css';\n\nconst getLocalStorage = () => {\n  let list = localStorage.getItem('list');\n  if (list) {\n    return JSON.parse(localStorage.getItem('list'));\n  } else {\n    return [];\n  }\n};\n\nfunction App() {\n  const [grocery, setGrocery] = useState('');\n  const [list, setList] = useState(getLocalStorage);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editID, setEditID] = useState(null);\n  const [alert, setAlert] = useState({\n    show: false,\n    message: '',\n    type: '',\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!grocery) {\n      showAlert(true, 'Please add proper value', 'danger');\n    } else if (grocery && isEditing) {\n      setList(\n        list.map((item) => {\n          if (item.id === editID) {\n            return { ...item, title: grocery };\n          }\n          return item;\n        }),\n      );\n      setGrocery('');\n      setEditID(null);\n      setIsEditing(false);\n      showAlert(true, 'Item changed!', 'success');\n    } else {\n      showAlert(true, 'Item added', 'success');\n\n      const newGroceryItem = {\n        id: new Date().getTime().toString(),\n        title: grocery,\n      };\n      setList([...list, newGroceryItem]);\n      setGrocery('');\n    }\n  };\n\n  const showAlert = (show = false, message = '', type = '') => {\n    setAlert({\n      show: show,\n      message: message,\n      type: type,\n    });\n  };\n\n  const clearListItem = () => {\n    showAlert(true, 'Elements deleted', 'danger');\n    setList([]);\n  };\n\n  const removeItem = (id) => {\n    showAlert(true, 'Item deleted', 'danger');\n    setList(list.filter((item) => item.id !== id));\n  };\n\n  const editItem = (id) => {\n    const editedId = list.find((item) => item.id === id);\n    setIsEditing(true);\n    setEditID(id);\n    setGrocery(editedId.title);\n  };\n\n  useEffect(() => {\n    localStorage.setItem('list', JSON.stringify(list));\n  }, [list]);\n\n  return (\n    <div className=\"app-container\">\n      <form className=\"grocery-form\" onSubmit={handleSubmit}>\n        {alert.show && <Alert {...alert} hideAlert={showAlert} list={list} />}\n        <h3>Grocery List</h3>\n        <div className=\"input-form-grocery\">\n          <input\n            type=\"text\"\n            className=\"input-grocery\"\n            placeholder=\"e.g. milk\"\n            value={grocery}\n            onChange={(e) => setGrocery(e.target.value)}\n          />\n          <button type=\"submit\" className=\"submit-btn\">\n            {isEditing ? 'Edit' : 'Add to list'}\n          </button>\n        </div>\n      </form>\n      {list.length > 0 && (\n        <div className=\"grocery-list-container\">\n          <List items={list} removeItem={removeItem} editItem={editItem} />\n          <button className=\"clear-btn\" onClick={clearListItem}>\n            Clear items\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}